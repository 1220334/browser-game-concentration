-module(trump_test).

-include_lib("eunit/include/eunit.hrl").
-include_lib("test/src/test.hrl").
-include_lib("src/trump.hrl").

return_record_that_has_atom_and_integer_test_() ->
	{?TEST_NAME,
	 [atom_is_spade_club_diamond_or_heart(),
	  integer_is_one_to_twelve(),
	  throw_exception_if_the_arguments_are_invalid()]}.
%	{?TEST_NAME,
%	 [return_spade_trump(),
%	  return_club_trump(),
%	  return_diamond_trump(),
%	  return_heart_trump()
%	 ]}.

atom_is_spade_club_diamond_or_heart() ->
	Atoms = [spade, club, diamond, heart],
	T1s = [trump:trump(Suit,1) || Suit <- Atoms],
	T2s = [#trump{suit=Suit, number=1} || Suit <- Atoms],
	[?_assertEqual(T1,T2) || {T1,T2} <- lists:zip(T1s,T2s)].

integer_is_one_to_twelve() ->
	Nums = lists:seq(1, 12),
	T1s = [trump:trump(spade,N) || N <- Nums],
	T2s = [#trump{suit=spade,number=N} || N <- Nums],
	[?_assertEqual(T1,T2) || {T1,T2} <- lists:zip(T1s,T2s)].

throw_exception_if_the_arguments_are_invalid() ->
	?_assertThrow(badarg, throw(badarg)).


return_spade_trump() ->
	{?TEST_NAME,
	 [return_one_to_twelve_spades_trump()]
	}.

return_club_trump() ->
	{?TEST_NAME,
%	 [return_one_to_twelve_club_trump]
	 [return_club_one_trump()]}.

return_diamond_trump() ->
	[return_diamond_one_trump()].

return_heart_trump() ->
	[return_heart_one_trump()].

return_one_to_twelve_spades_trump() ->
	Nums = lists:seq(1, 12),
	T1s = [trump:trump(spade,N) || N <- Nums],
	T2s = [#trump{suit=spade, number=N} || N <- Nums],
	[?_assertEqual(T1, T2) || {T1, T2} <- lists:zip(T1s,T2s)].

return_club_one_trump() ->
   	T1 = trump:trump(club, 1),
	T2 = #trump{suit=club, number=1},
	?_assertEqual(T1, T2).

return_diamond_one_trump() ->
   	T1 = trump:trump(diamond, 1),
	T2 = #trump{suit=diamond, number=1},
	?_assertEqual(T1, T2).

return_heart_one_trump() ->
   	T1 = trump:trump(heart, 1),
	T2 = #trump{suit=heart, number=1},
	?_assertEqual(T1, T2).
